// <auto-generated />
using System;
using CMAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CMAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250429100503_InitialCreate1")]
    partial class InitialCreate1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CMAPI.Models.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InstalledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetStatusId");

                    b.HasIndex("AssetTypeId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("CMAPI.Models.AssetStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AssetStatuses");
                });

            modelBuilder.Entity("CMAPI.Models.AssetType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AssetTypes");
                });

            modelBuilder.Entity("CMAPI.Models.Avaria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdStatus")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdUrgencia")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TechnicianId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("TempoResolverAvaria")
                        .HasColumnType("interval");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("IdStatus");

                    b.HasIndex("IdUrgencia");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("UserId");

                    b.ToTable("Avaria");
                });

            modelBuilder.Entity("CMAPI.Models.AvariaAtribuicao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AtribuidoPor")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AvariaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TechnicianId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AtribuidoPor");

                    b.HasIndex("AvariaId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("AvariaAtribuicoes");
                });

            modelBuilder.Entity("CMAPI.Models.AvariaComentario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AvariaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AvariaId");

                    b.HasIndex("UserId");

                    b.ToTable("AvariaComentarios");
                });

            modelBuilder.Entity("CMAPI.Models.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AvariaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AvariaId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("CMAPI.Models.MessageReadReceipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatMessageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageReadReceipts");
                });

            modelBuilder.Entity("CMAPI.Models.MultiFactoring", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MultifactorCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Validated")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MultiFactorings");
                });

            modelBuilder.Entity("CMAPI.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvariaAtribuicaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvariaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResponseAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResponseReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponseStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AvariaAtribuicaoId");

                    b.HasIndex("AvariaId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CMAPI.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CMAPI.Models.TipoStatusAvaria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TipoStatusAvaria");
                });

            modelBuilder.Entity("CMAPI.Models.TipoUrgencia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TipoUrgencia");
                });

            modelBuilder.Entity("CMAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailVerificationCode")
                        .HasColumnType("text");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("LockoutDuration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("LockoutEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxFailedAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("refreshToken")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CMAPI.Models.Asset", b =>
                {
                    b.HasOne("CMAPI.Models.AssetStatus", "Status")
                        .WithMany("Assets")
                        .HasForeignKey("AssetStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMAPI.Models.AssetType", "AssetType")
                        .WithMany("Assets")
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("CMAPI.Models.Avaria", b =>
                {
                    b.HasOne("CMAPI.Models.Asset", "Asset")
                        .WithMany("Avaria")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMAPI.Models.TipoStatusAvaria", "Status")
                        .WithMany("Avaria")
                        .HasForeignKey("IdStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMAPI.Models.TipoUrgencia", "Urgencia")
                        .WithMany("Avaria")
                        .HasForeignKey("IdUrgencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMAPI.Models.User", "Technician")
                        .WithMany("AvariaAssigned")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMAPI.Models.User", "User")
                        .WithMany("AvariaReported")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Status");

                    b.Navigation("Technician");

                    b.Navigation("Urgencia");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMAPI.Models.AvariaAtribuicao", b =>
                {
                    b.HasOne("CMAPI.Models.User", "AssignedBy")
                        .WithMany("AvariaAtribuicoesBy")
                        .HasForeignKey("AtribuidoPor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMAPI.Models.Avaria", "Avaria")
                        .WithMany("Atribuicoes")
                        .HasForeignKey("AvariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMAPI.Models.User", "Technician")
                        .WithMany("AvariaAtribuicoesAssigned")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedBy");

                    b.Navigation("Avaria");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("CMAPI.Models.AvariaComentario", b =>
                {
                    b.HasOne("CMAPI.Models.Avaria", "Avaria")
                        .WithMany("Comentarios")
                        .HasForeignKey("AvariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMAPI.Models.User", "User")
                        .WithMany("AvariaComentarios")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avaria");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMAPI.Models.ChatMessage", b =>
                {
                    b.HasOne("CMAPI.Models.Avaria", "Avaria")
                        .WithMany("ChatMessages")
                        .HasForeignKey("AvariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMAPI.Models.User", "Sender")
                        .WithMany("ChatMessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avaria");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CMAPI.Models.MessageReadReceipt", b =>
                {
                    b.HasOne("CMAPI.Models.ChatMessage", "ChatMessage")
                        .WithMany("ReadReceipts")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMAPI.Models.User", "User")
                        .WithMany("MessagesRead")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMAPI.Models.MultiFactoring", b =>
                {
                    b.HasOne("CMAPI.Models.User", "User")
                        .WithMany("MultiFactorings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMAPI.Models.Notification", b =>
                {
                    b.HasOne("CMAPI.Models.AvariaAtribuicao", "AvariaAtribuicao")
                        .WithMany("Notifications")
                        .HasForeignKey("AvariaAtribuicaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMAPI.Models.Avaria", "Avaria")
                        .WithMany("Notifications")
                        .HasForeignKey("AvariaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMAPI.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avaria");

                    b.Navigation("AvariaAtribuicao");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMAPI.Models.User", b =>
                {
                    b.HasOne("CMAPI.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CMAPI.Models.Asset", b =>
                {
                    b.Navigation("Avaria");
                });

            modelBuilder.Entity("CMAPI.Models.AssetStatus", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("CMAPI.Models.AssetType", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("CMAPI.Models.Avaria", b =>
                {
                    b.Navigation("Atribuicoes");

                    b.Navigation("ChatMessages");

                    b.Navigation("Comentarios");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("CMAPI.Models.AvariaAtribuicao", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("CMAPI.Models.ChatMessage", b =>
                {
                    b.Navigation("ReadReceipts");
                });

            modelBuilder.Entity("CMAPI.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CMAPI.Models.TipoStatusAvaria", b =>
                {
                    b.Navigation("Avaria");
                });

            modelBuilder.Entity("CMAPI.Models.TipoUrgencia", b =>
                {
                    b.Navigation("Avaria");
                });

            modelBuilder.Entity("CMAPI.Models.User", b =>
                {
                    b.Navigation("AvariaAssigned");

                    b.Navigation("AvariaAtribuicoesAssigned");

                    b.Navigation("AvariaAtribuicoesBy");

                    b.Navigation("AvariaComentarios");

                    b.Navigation("AvariaReported");

                    b.Navigation("ChatMessagesSent");

                    b.Navigation("MessagesRead");

                    b.Navigation("MultiFactorings");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
